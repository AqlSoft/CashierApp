namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Payment;
use App\Models\Order;
use App\Models\PaymentMethod;
use Illuminate\Support\Facades\DB;

class PaymentController extends Controller
{
    // عرض صفحة الدفع
    public function create($orderId)
    {
        $order = Order::with('customer')->findOrFail($orderId);
        $paymentMethods = PaymentMethod::where('is_active', 1)->get(); // جلب طرق الدفع النشطة
        return view('payments.create', compact('order', 'paymentMethods'));
    }

    // حفظ الدفع
    public function store(Request $request, $orderId)
    {
        DB::beginTransaction();
        try {
            // التحقق من صحة البيانات
            $request->validate([
                'payment_method_id' => 'required|exists:payment_methods,id',
                'amount' => 'required|numeric|min:0',
                'reference' => 'required|string',
            ]);

            // إنشاء الدفع
            $payment = Payment::create([
                'order_id' => $orderId,
                'payment_method_id' => $request->payment_method_id,
                'amount' => $request->amount,
                'date' => now(),
                'status' => 1, // ناجح
                'reference' => $request->reference,
            ]);

            // تحديث حالة الطلب
            $order = Order::findOrFail($orderId);
            $order->update(['status' => 'paid']);

            DB::commit();

            return redirect()->route('orders.show', $orderId)
                ->with('success', 'تم تأكيد الدفع بنجاح.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء تأكيد الدفع: ' . $e->getMessage())
                ->withInput();
        }
    }
}


<div class="order-details">
  <h3>معلومات الطلب</h3>
  <p>رقم الطلب: <strong>#{{ $order->id }}</strong></p>
  <p>الإجمالي: <strong>{{ $order->total_amount }} جنيه</strong></p>
  <p>الضريبة: <strong>{{ $order->vat_amount }} جنيه</strong></p>
  <p>الإجمالي النهائي: <strong>{{ $order->total_amount + $order->vat_amount }} جنيه</strong></p>
  <p>حالة الطلب: <strong>{{ $order->status }}</strong></p>
</div>

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Payment;
use App\Models\Order;
use App\Models\PaymentMethod;
use Illuminate\Support\Facades\DB;

class PaymentController extends Controller
{
    // عرض صفحة الدفع
    public function create($orderId)
    {
        $order = Order::with('customer')->findOrFail($orderId);
        $paymentMethods = PaymentMethod::where('is_active', 1)->get(); // جلب طرق الدفع النشطة
        return view('payments.create', compact('order', 'paymentMethods'));
    }

    // حفظ الدفع
    public function store(Request $request, $orderId)
    {
        DB::beginTransaction();
        try {
            // التحقق من صحة البيانات
            $request->validate([
                'payment_method_id' => 'required|exists:payment_methods,id',
                'amount' => 'required|numeric|min:0',
                'reference' => 'required|string',
            ]);

            // إنشاء الدفع
            $payment = Payment::create([
                'order_id' => $orderId,
                'payment_method_id' => $request->payment_method_id,
                'amount' => $request->amount,
                'date' => now(),
                'status' => 1, // ناجح
                'reference' => $request->reference,
            ]);

            // تحديث حالة الطلب
            $order = Order::findOrFail($orderId);
            $order->update(['status' => 'paid']);

            DB::commit();

            return redirect()->route('orders.show', $orderId)
                ->with('success', 'تم تأكيد الدفع بنجاح.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء تأكيد الدفع: ' . $e->getMessage())
                ->withInput();
        }
    }
}


INSERT INTO accounts (reference, from_account, to_account, value)
VALUES ('فاتورة مبيعات', 2, 1, 500.00);


$paymentData = [
    'OrderID' => null, // لا يوجد طلب مرتبط
    'PaymentMethod' => 1, // نقدي
    'Amount' => 100, // المبلغ المدفوع
    'Date' => now(), // تاريخ الدفع
    'Status' => 1, // ناجح
    'from' => 1, // الحساب الذي تم السحب منه (الخزنة)
    'to' => 3, // الحساب الذي تم الإيداع فيه (الموظف)
    'reference' => 'سند سلفة', // المرجع
];

$payment = Payment::create($paymentData);

Account::create([
    'reference' => 'سند سلفة',
    'from' => 1, // الحساب الذي تم السحب منه (الخزنة)
    'to' => 3, // الحساب الذي تم الإيداع فيه (الموظف)
    'value' => 100, // قيمة العملية
    'date' => now(), // تاريخ العملية
]);


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Payment;
use App\Models\Order;
use App\Models\PaymentMethod;
use Illuminate\Support\Facades\DB;

class PaymentController extends Controller
{
    // عرض صفحة اختيار طريقة الدفع
    public function showPaymentMethods($orderId)
    {
        $order = Order::findOrFail($orderId);
        $paymentMethods = PaymentMethod::where('is_active', 1)->get();
        return view('payments.methods', compact('order', 'paymentMethods'));
    }

    // معالجة الدفع
    public function processPayment(Request $request, $orderId)
    {
        DB::beginTransaction();
        try {
            // التحقق من صحة البيانات
            $request->validate([
                'payment_method_id' => 'required|exists:payment_methods,id',
                'amount' => 'required|numeric|min:0',
            ]);

            // جلب طريقة الدفع
            $paymentMethod = PaymentMethod::findOrFail($request->payment_method_id);

            // معالجة الدفع
            $paymentStatus = $this->handlePayment($paymentMethod->name, $request->amount);

            // إنشاء الدفع
            $payment = Payment::create([
                'order_id' => $orderId,
                'payment_method_id' => $paymentMethod->id,
                'amount' => $request->amount,
                'status' => $paymentStatus ? 1 : 0, // 1 = ناجح، 0 = فاشل
                'reference' => 'فاتورة مبيعات #' . $orderId,
            ]);

            // تحديث حالة الطلب
            $order = Order::findOrFail($orderId);
            $order->update(['status' => $paymentStatus ? 'paid' : 'pending']);

            DB::commit();

            return redirect()->route('orders.show', $orderId)
                ->with('success', $paymentStatus ? 'تم الدفع بنجاح.' : 'فشل الدفع.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء معالجة الدفع: ' . $e->getMessage())
                ->withInput();
        }
    }

    // معالجة الدفع (وهمي)
    private function handlePayment($method, $amount)
    {
        // يمكن استبدال هذا الجزء باتصال حقيقي ببوابة الدفع
        if ($method === 'نقدي') {
            return true; // الدفع ناجح
        } elseif ($method === 'بطاقة' || $method === 'محفظة إلكترونية') {
            // محاكاة اتصال ببوابة الدفع
            return rand(0, 1) === 1; // نجاح أو فشل عشوائي
        }
        return false;
    }
}


@extends('layouts.app')

@section('content')
<div class="container">
    <h1>اختر طريقة الدفع للطلب #{{ $order->id }}</h1>

    <form action="{{ route('payments.process', $order->id) }}" method="POST">
        @csrf
        <div class="form-group">
            <label for="payment_method_id">طريقة الدفع:</label>
            <select name="payment_method_id" id="payment_method_id" class="form-control" required>
                @foreach ($paymentMethods as $method)
                    <option value="{{ $method->id }}">{{ $method->name }}</option>
                @endforeach
            </select>
        </div>
        <div class="form-group">
            <label for="amount">المبلغ المدفوع:</label>
            <input type="number" name="amount" id="amount" class="form-control" value="{{ $order->total_amount }}" required>
        </div>
        <button type="submit" class="btn btn-primary">تأكيد الدفع</button>
    </form>
</div>
@endsection


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Payment;
use App\Models\Order;
use App\Models\PaymentMethod;
use Illuminate\Support\Facades\DB;

class PaymentController extends Controller
{
    // عرض صفحة الدفع
    public function create($orderId)
    {
        $order = Order::with('customer')->findOrFail($orderId);
        $paymentMethods = PaymentMethod::where('is_active', 1)->get(); // جلب طرق الدفع النشطة
        return view('payments.create', compact('order', 'paymentMethods'));
    }

    // حفظ الدفع
    public function store(Request $request, $orderId)
    {
        DB::beginTransaction();
        try {
            // التحقق من صحة البيانات
            $request->validate([
                'payment_method_id' => 'required|exists:payment_methods,id',
                'amount' => 'required|numeric|min:0',
                'reference' => 'required|string',
            ]);

            // إنشاء الدفع
            $payment = Payment::create([
                'order_id' => $orderId,
                'payment_method_id' => $request->payment_method_id,
                'amount' => $request->amount,
                'date' => now(),
                'status' => 1, // ناجح
                'reference' => $request->reference,
            ]);

            // تحديث حالة الطلب
            $order = Order::findOrFail($orderId);
            $order->update(['status' => 'paid']);

            DB::commit();

            return redirect()->route('orders.show', $orderId)
                ->with('success', 'تم تأكيد الدفع بنجاح.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء تأكيد الدفع: ' . $e->getMessage())
                ->withInput();
        }
    }
}




namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class SalesInvoice extends Model
{
    protected $fillable = [
        'order_id', 'serial_number_order', 'client_id', 'invoice_number',
        'invoice_date', 'vat_number', 'due_date', 'payment_date',
        'amount', 'vat_amount', 'total_amount', 'status', 'type', 'created_by',
    ];

    /**
     * Generate a unique invoice number.
     *
     * @return string
     */
    public static function generateNumber()
    {
        // الحصول على آخر فاتورة تم إدخالها
        $lastInvoice = self::latest('id')->first();

        // إذا كانت هناك فواتير موجودة، نأخذ آخر رقم فاتورة ونضيف 1
        if ($lastInvoice) {
            $lastNumber = $lastInvoice->invoice_number;
            $nextNumber = (int) $lastNumber + 1;
        } else {
            // إذا لم تكن هناك فواتير، نبدأ برقم معين (مثل 1000)
            $nextNumber = 0001;
        }

        // إرجاع الرقم الجديد
        return str_pad($nextNumber, 8, '0', STR_PAD_LEFT); // لجعل الرقم مكونًا من 8 أرقام (مثال: 00001000)
    }
}



<?php

namespace App\Http\Controllers\Admin;

use App\Models\InvoiceItem;
use Illuminate\Http\Request;
use Illuminate\Database\QueryException;
use Exception;
use App\Models\Order;
use App\Models\Payment;
use App\Models\SalesInvoice;

class PaymentsController
{

    /**confirmPayment
     * Display a listing of the resource.
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function cashStore(Request $request, $orderId)
    {

        // store invoice
        $order = Order::find($orderId);
        try {
          // إنشاء الفاتورة
          $invoice = SalesInvoice::create([
              'order_id' => $orderId,
              'serial_number_order' => $request->serial_number,
              'client_id'           => $request->client_id,
              'invoice_number'      => SalesInvoice::generateNumber(),
              'invoice_date'        => $request->invoice_date,
              'vat_number'          => $request->vat_number,
              'due_date'            => $request->due_date,
              'payment_date'        => $request->payment_date,
              'amount'              => $request->amount,
              'vat_amount'          => $request->vat_amount,
              'total_amount'        => $request->total_amount,
              'status'              => $request->amount >= $request->total_amount ? 1 : 0,
              'type'                => 'sales', // حالة الفاتورة
              'created_by'          => auth()->user()->id,
          ]);

          // جلب أصناف الطلب المرتبطة بالطلب
          $orderItems = OrderItem::where('order_id', $orderId)
              ->with(['product', 'category', 'unit'])
              ->get();

          // التأكد من وجود أصناف
          if ($orderItems->isEmpty()) {
              return redirect()->back()
                  ->with('error', 'لا توجد أصناف في الطلب.')
                  ->withInput();
          }

          // إضافة أصناف الفاتورة
          foreach ($orderItems as $item) {
              InvoiceItem::create([
                  'category_id' => $item->category_id,
                  'product_id'  => $item->product_id,
                  'invoice_id' => $invoice->id,
                  'quantity'    => $item->quantity,
                  'unit_id'    => $item->unit_id,
                  'price'       => $item->price,
                  'notes'      => $item->notes,
                  'created_by' => auth()->user()->id,
              ]);
          }
        $order = Order::find($orderId);
        try {
            $invoice = SalesInvoice::create([
                'order_id' => $orderId,
                'invoice_number' => SalesInvoice::generateNumber(),
                'invoice_date' => date('Y-m-d'),
                'due_date' => date('Y-m-d'),
                'payment_method' => '1',
                'client_id' => 1,
                'amount' => $order->amount,
                'vat'   => $order->vat,
                'tatal' => $order->total,
            ]);

            // foreach ($order->items as $item) {
            //     InvoiceItem::create([
            //         'invoice_id' => $order->id,

            //         'invoice_id' => $invoice->id,
            //         'product_id',
            //         'qty',
            //         'unit',
            //         'unit_price'
            //     ]);
            // }

            foreach ($order->items as $item) {
                $item->invoice_id = $invoice->id;
                $item->save();
            }
        } catch (QueryException $e) {
        }

        // store payment
        // update order status
        try {
            // إنشاء الدفع
            $payment = Payment::create([
                'order_id'          => $orderId,
                'invoice_id'        => $orderId,
                'payment_method_id' => '1',
                'amount'            => $request->amount,
                'payment_date'      => now(),
                'status'            => 1, // ناجح
                'from_account'      => 1, // الحساب الذي تم السحب منه (الخزنة)
                'to_account'        => 3, // الحساب الذي تم الإيداع فيه (الموظف)
                'Note'              => 'سند سلفة', // المرجع
                'created_by'        => auth()->user()->id,
            ]);

            // تحديث حالة الطلب
            $order = Order::findOrFail($orderId);
            $order->update(['status' => '4']); // تم الدفع
            return redirect()->back()->with('success', 'تم حفظ البيانات بنجاح.');
        } catch (\Exception $e) {
            return redirect()->back()
                ->with('error', 'حدث خطأ أثناء حفظ البيانات: ' . $e->getMessage())
                ->withInput();
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
}
